// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WorldAround.Events.Infrastructure.Data;

#nullable disable

namespace WorldAround.Events.Infrastructure.Migrations
{
    [DbContext(typeof(EventsContext))]
    [Migration("20220607102808_Update_DisplayIsRequired")]
    partial class Update_DisplayIsRequired
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Accessibility", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Accessibilities");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<double>("ActualQuantity")
                        .HasColumnType("float");

                    b.Property<int?>("EquipmentGroupId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NeededQuantity")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentGroupId");

                    b.HasIndex("EventId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.EquipmentGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EquipmentsGroups");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AccessibilityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Display")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccessibilityId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("FilePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("EventId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("ChatId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Display")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<Guid?>("ReplyMessageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("EventId");

                    b.HasIndex("ReplyMessageId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Participant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("ParticipantRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("ParticipantRoleId");

                    b.HasIndex("UserId", "EventId")
                        .IsUnique();

                    b.ToTable("Participants");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.ParticipantPermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParticipantsPermissions");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.ParticipantPermissionLink", b =>
                {
                    b.Property<int>("ParticipantId")
                        .HasColumnType("int");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("ParticipantId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ParticipantPermissionLinks");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.ParticipantRole", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ParticipantRoles");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.TripEventLink", b =>
                {
                    b.Property<int>("TripId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("TripId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("TripEventLinks");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Album", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("Albums")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Chat", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("Chats")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Equipment", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.EquipmentGroup", "EquipmentGroup")
                        .WithMany("Equipments")
                        .HasForeignKey("EquipmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("Equipments")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("EquipmentGroup");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.EquipmentGroup", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("EquipmentGroups")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Event", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Accessibility", "Accessibility")
                        .WithMany("Events")
                        .HasForeignKey("AccessibilityId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Accessibility");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Image", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Album", "Album")
                        .WithMany("Images")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("Images")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Message", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("Messages")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldAround.Events.Domain.Entities.Message", "ReplyMessage")
                        .WithMany("ReplyMessages")
                        .HasForeignKey("ReplyMessageId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Chat");

                    b.Navigation("Event");

                    b.Navigation("ReplyMessage");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Participant", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("Participants")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WorldAround.Events.Domain.Entities.ParticipantRole", "ParticipantRole")
                        .WithMany("Participants")
                        .HasForeignKey("ParticipantRoleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("ParticipantRole");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.ParticipantPermissionLink", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Participant", "Participant")
                        .WithMany("ParticipantPermissionLinks")
                        .HasForeignKey("ParticipantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WorldAround.Events.Domain.Entities.ParticipantPermission", "Permission")
                        .WithMany("ParticipantPermissionLinks")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Participant");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.TripEventLink", b =>
                {
                    b.HasOne("WorldAround.Events.Domain.Entities.Event", "Event")
                        .WithMany("TripEventLinks")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Accessibility", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Album", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.EquipmentGroup", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Event", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Chats");

                    b.Navigation("EquipmentGroups");

                    b.Navigation("Equipments");

                    b.Navigation("Images");

                    b.Navigation("Messages");

                    b.Navigation("Participants");

                    b.Navigation("TripEventLinks");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Message", b =>
                {
                    b.Navigation("ReplyMessages");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.Participant", b =>
                {
                    b.Navigation("ParticipantPermissionLinks");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.ParticipantPermission", b =>
                {
                    b.Navigation("ParticipantPermissionLinks");
                });

            modelBuilder.Entity("WorldAround.Events.Domain.Entities.ParticipantRole", b =>
                {
                    b.Navigation("Participants");
                });
#pragma warning restore 612, 618
        }
    }
}
